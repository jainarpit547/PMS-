{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\"; // import jwt from \"jwt-decode\";\n\nimport jwt from \"jwt-simple\";\nimport { GET_ERRORS, GET_SUCCESS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\nimport constants from \"../constants/index\";\nexport const loginUser = userData => dispatch => {\n  console.log('req with', userData);\n  axios.post(constants.baseUrl + \"/api/v1/users/login\", userData).then(res => {\n    console.log(res, 'res is'); //const { token } = res.data;\n\n    const secret = \"FxUum76z\";\n    const currentTime = Date.now() / 1000;\n    const payload = {\n      id: res.data.id,\n      email: res.data.email,\n      user_type: res.data.user_type,\n      token: res.data.token,\n      expires: currentTime + 604800\n    }; // encode\n\n    const token = jwt.encode(payload, secret);\n    localStorage.setItem(\"jwtToken\", token);\n    setAuthToken(token); //const decoded = jwt_decode(token);\n    // decode\n\n    const decoded = jwt.decode(token, secret);\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err\n    });\n  });\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\nexport const logoutUser = logoutData => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n  let config = {\n    method: 'DELETE',\n    url: constants.baseUrl + '/api/v1/users/logout',\n    data: logoutData,\n    headers: {\n      Authorization: \"Bearer \" + logoutData.token,\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  axios(config).then(success => {\n    console.log(\"SUCCESSfully logout\");\n    dispatch({\n      type: GET_SUCCESS,\n      payload: success\n    });\n  }, error => {\n    console.log(\"ERROR\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  });\n};","map":{"version":3,"sources":["/home/android03/Projects/pms-frontend/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt","GET_ERRORS","GET_SUCCESS","SET_CURRENT_USER","USER_LOADING","constants","loginUser","userData","dispatch","console","log","post","baseUrl","then","res","secret","currentTime","Date","now","payload","id","data","email","user_type","token","expires","encode","localStorage","setItem","decoded","decode","setCurrentUser","catch","err","type","setUserLoading","logoutUser","logoutData","removeItem","config","method","url","headers","Authorization","Accept","success","error","response"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\n// import jwt from \"jwt-decode\";\nimport jwt from \"jwt-simple\";\nimport {\n  GET_ERRORS,\n  GET_SUCCESS,\n  SET_CURRENT_USER,\n  USER_LOADING,\n} from \"./types\";\nimport constants from \"../constants/index\";\n\n\nexport const loginUser = (userData) => (dispatch) => {\n  console.log('req with',userData)\n  axios\n    .post(constants.baseUrl + \"/api/v1/users/login\", userData)\n    .then((res) => {\n      console.log(res ,'res is')\n      //const { token } = res.data;\n      const secret = \"FxUum76z\";\n      const currentTime = Date.now() / 1000;\n      const payload = {\n        id: res.data.id,\n        email: res.data.email,\n        user_type: res.data.user_type,\n        token: res.data.token,\n        expires: currentTime + 604800,\n      };\n      // encode\n      const token = jwt.encode(payload, secret);\n\n      localStorage.setItem(\"jwtToken\", token);\n      setAuthToken(token);\n      //const decoded = jwt_decode(token);\n\n      // decode\n      const decoded = jwt.decode(token, secret);\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch((err) => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err,\n      });\n    });\n};\n\n\nexport const setCurrentUser = (decoded) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded,\n  };\n};\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING,\n  };\n};\n\nexport const logoutUser = (logoutData) => (dispatch) => {\n  localStorage.removeItem(\"jwtToken\");\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n  let config = {\n    method:'DELETE',\n    url: constants.baseUrl + '/api/v1/users/logout',\n    data: logoutData,\n    headers:{\n        Authorization: \"Bearer \" + logoutData.token, Accept : 'application/json', 'Content-Type': 'application/json'\n    }\n}\naxios(config).then(\n  success=>{\n      console.log(\"SUCCESSfully logout\")\n      dispatch({\n                  type: GET_SUCCESS,\n                  payload: success,\n      })\n  },\n  error=>{\n      console.log(\"ERROR\")\n      dispatch({\n                  type: GET_ERRORS,\n                  payload: error.response.data\n              })\n          }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}